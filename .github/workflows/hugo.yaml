###################################################
# 部署到 github pages 和我的服务器
###################################################


# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.124.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        # uses是直接调用actions, run是自己写命令
        uses: actions/upload-pages-artifact@v3
        # with 是用于给 uses 指定的的 actions 传递参数的
        with:
          path: ./public
      # 为什么ssh部署静态文件到自己的服务器这一步骤要写到这里?
      # 因为: 
      #   不同阶段数据不互通. 这一阶段(build阶段)安装的hugo和检出的代码到下一阶段就没了
      #   要使用hugo生成静态文件并传输就只能在这一阶段了, 如果在下一阶段执行的话还要重新安装hugo并检出代码   
      - name: Set up SSH access
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ vars.SSH_HOST }}
          SSH_PORT: ${{ vars.SSH_PORT }}
          SSH_USER: ${{ vars.SSH_USER }}
          DEPLOY_PATH_PREFIX: ${{ vars.DEPLOY_PATH_PREFIX }}
        # 这段执行了什么内容:
        # 使用ssh-keyscan获取ssh服务端的SSH公钥并保存进自己的known_hosts文件.
        # 如果服务器端口不开放或者ssh-keyscan无法使用, 您可能需要手动添加服务器的公钥到known_hosts文件  
        # 使用ssh命令在服务器上执行脚本或命令
        # 使用scp命令复制文件到服务器
        run: | 
          hugo --gc --minify
          pwd
          ls
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p $SSH_PORT $SSH_HOST >> ~/.ssh/known_hosts
          scp -P $SSH_PORT -r ./public "$SSH_USER@$SSH_HOST:$DEPLOY_PATH_PREFIX/hugo_new" 
          ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "rm -rf $DEPLOY_PATH_PREFIX/hugo \
          && mv $DEPLOY_PATH_PREFIX/hugo_new $DEPLOY_PATH_PREFIX/hugo"
      - name: Clean up SSH keys  
        if: always() # 确保即使在出错时也清理密钥  
        # 如果手动添加了服务器的公钥,也需要删除known_hosts文件  
        run: |  
          rm -rf ~/.ssh/id_rsa  
          rm -rf ~/.ssh/known_hosts

  # Deployment job
  deploy:
    # 这里设置了使用名为 github-pages 的environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


###################################################
# 原版仅部署 github pages
###################################################

# # Sample workflow for building and deploying a Hugo site to GitHub Pages
# name: Deploy Hugo site to Pages

# on:
#   # Runs on pushes targeting the default branch
#   push:
#     branches:
#       - main

#   # Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# # Default to bash
# defaults:
#   run:
#     shell: bash

# jobs:
#   # Build job
#   build:
#     runs-on: ubuntu-latest
#     env:
#       HUGO_VERSION: 0.124.0
#     steps:
#       - name: Install Hugo CLI
#         run: |
#           wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
#           && sudo dpkg -i ${{ runner.temp }}/hugo.deb          
#       - name: Install Dart Sass
#         run: sudo snap install dart-sass
#       - name: Checkout
#         uses: actions/checkout@v4
#         with:
#           submodules: recursive
#           fetch-depth: 0
#       - name: Setup Pages
#         id: pages
#         uses: actions/configure-pages@v4
#       - name: Install Node.js dependencies
#         run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
#       - name: Build with Hugo
#         env:
#           # For maximum backward compatibility with Hugo modules
#           HUGO_ENVIRONMENT: production
#           HUGO_ENV: production
#         run: |
#           hugo \
#             --gc \
#             --minify \
#             --baseURL "${{ steps.pages.outputs.base_url }}/"          
#       - name: Upload artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ./public

#   # Deployment job
#   deploy:
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4